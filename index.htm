
<!DOCTYPE html>

<meta charset=utf-8>
<head>
	<link rel=icon href=http://getbootstrap.com/favicon.ico>
	<title>Knowledge Graph</title>
	<link href="vendor/bootstrap.min.css" rel="stylesheet">
	<script src="vendor/d3.v3.min.js"></script>
	<script src="vendor/d3.tip.v0.6.3.js"></script>
	<script src="vendor/jquery-1.11.2.js"></script>
	<script>window.jQuery || document.write('<script src="js/vendor/jquery-1.11.2.js"><\/script>')</script>
	<link rel="stylesheet" href="style.css" type="text/css" />
</head>
<body>
	<div class="container">
		<div class="jumbotron">
			<h2>D3 Demo</h2>
			<h3>
				The knowledge graph of Stack Overflow<br>
				<small>
					StackOverflow data visualisation tool demo
				</small>
		</h3>
	</br>
</div>
<div class="row">
	<div class="col-lg-8 col-lg-offset-2">
		<div class="input-group">
			<input id="searchText" type="text" class="form-control input-lg" placeholder="Search for tags...">
			<span class="input-group-btn">
				<button id= "searchByTagBtn" class="btn btn-default btn-lg" type="button">
					<span class="glyphicon glyphicon-search" aria-hidden="true"></span>
				</button>
			</span>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-lg-8 col-lg-offset-2">
		<div class="input-group">
			<div class="dropdown">
				<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
					Select user
				</button>
				<div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
					<a class="dropdown-item" href="#">Gordon Linoff</a>
					<a class="dropdown-item" href="#">Jezrael</a>
					<a class="dropdown-item" href="#">Jpp</a>
					<a class="dropdown-item" href="#">Abarnert</a>
					<a class="dropdown-item" href="#">Coldspeed</a>
				</div>
			</div>
		</div>
	</div>
</div>
<div id="searchResult" class="col-md-4 center-block">

</div>
<br/>
<br/>
<br/>
<div class="row info-row">
	<div class="col-lg-10">
		<h4><span class="label label-info">right click</span> the node for its definition or <span class="label label-info">double click</span> for more details.</h4>
		<h4>Showing results for <b><element id="demo">Java</h4></b>
	</div>
</div>
<div class="row">
	<div id="graph" style="text-align:center"></div>
</div>
</div>
<script src="graph/graph.js"></script>
<script>

var topUsers = {
	'gordon linoff': 1144035,
	'jezrael': 2901002,
	'jpp': 9209546,
	'abarnert': 908494,
	'coldspeed': 4909087 
}

var featureContent= {nodes: [], links: []};

function callNodes(node) {
	$.get("http://api.stackexchange.com/2.2/tags/" + node + "/related?key=NQU188)dqBTbOdqwFCuikQ((&site=stackoverflow", function (data) {
		allRelatedNodes = data["items"];
		setNodes(allRelatedNodes, node);
		$('.info-row').show();
	});
}

function callForUserName(node) {
	$.get("https://api.stackexchange.com/2.2/users/" + node + "/top-tags?key=NQU188)dqBTbOdqwFCuikQ((&site=stackoverflow", function (data) {
		allRelatedNodes = data["items"];
		setUserNodes(allRelatedNodes);
		$('.info-row').show();
	});
}

function callForUserNumber(userID) {
	$.get("https://api.stackexchange.com/2.2/users/" + userID + "?key=NQU188)dqBTbOdqwFCuikQ((&order=desc&sort=reputation&site=stackoverflow", function (data) {
		allUserInfo = data["items"];
		setUserName(allUserInfo);
	});
}

function setUserName(allUserInformation) {
	for (var i = 0; i < allUserInformation.length; i++) {
		var usersName = allUserInformation[i].display_name;
		console.log(usersName);
		document.getElementById("demo").innerHTML = usersName;
	}
}

function setNodes(allNodes, node) {
	featureContent = { nodes:[{ name: node, group:0, degree: 20 }], links:[] };
	for (var i = 0; i < allNodes.length; i++) {
		var colorRandom = Math.floor(Math.random() * 18) + 1;
		var name = allNodes[i].name;
		var newNode = {'name': name, 'group': colorRandom, 'degree': 10};
		var newLink = {'source': 0, 'target': i+1, 'color': 5};
		featureContent.nodes.push(newNode);
		featureContent.links.push(newLink);
	}
	d3.selectAll("svg").remove();
	featureGraph(featureContent,900,700,0,"#graph",200,-200);
}

function checkFoundAllRelated(allNodes, callback) {
	var foundAllRelated = true;
	allNodes.forEach(function(node) {
		if (!node.foundRelated) {
			foundAllRelated = false;
		}
	});
	if (foundAllRelated) {
		allNodes.forEach(function(node, i) {
			// node.source = i;
			// node.target = 0;
			node.group = i;
			node.size = 18;
			node.relatedNodes.forEach(function(r) {
				r.tag_name = r.name;
				// r.source = allNodes.length;
				r.target = i;
				r.group = i;
				r.size = 5;
				r.type = 'child';
				allNodes.push(r);
			});
		});
		callback(allNodes);
	}
}

function findAndLinkSimilarNodes(allNodes, node, index) {
	allNodes.forEach(function(n, i) {
		if (n.type === 'child') {
			allNodes.forEach(function(otherNode, index) {
				if (otherNode.type === 'child' && otherNode.tag_name === node.tag_name) {
					var newLink = {'source': otherNode.target, 'target': index, 'color': 5};
					featureContent.links.push(newLink);
				}
			});
		}
		else if (n.tag_name === node.tag_name) {
			var newLink = {'source': node.target, 'target': i, 'color': 5};
			featureContent.links.push(newLink);
		}
	});
}

function updateFeatureContent(allNodes) {
	// featureContent.nodes = [];
	// featureContent.links = [];
	var colorRandom = Math.floor(Math.random() * allNodes.length) + 1;
	allNodes.forEach(function(node, i) {
		var name = node.tag_name;
		var newNode = {'name': name, 'group': node.group, 'degree': node.size};
		featureContent.nodes.push(newNode);
		if (node.target >= 0) {
			var newLink = {'source': i, 'target': node.target, 'color': 5};
			featureContent.links.push(newLink);
		}
		console.log('link:');
		console.log(JSON.stringify(newLink, null, 2));
		// Connect recurring tags
		if (node.type === 'child') {
			// findAndLinkSimilarNodes(allNodes, node, i);
		}
	});
	d3.selectAll("svg").remove();
	featureGraph(featureContent,1150,1070,0,"#graph",90,-100);
}

function setUserNodes(allNodes) {
	featureContent = { nodes:[],links:[]};

	$.each(allNodes, function(index, node) {
		var name = node.tag_name;
		node.foundRelated = false;

		$.get("http://api.stackexchange.com/2.2/tags/" + name.replace("#","%23") + "/related?key=NQU188)dqBTbOdqwFCuikQ((&pagesize=5&site=stackoverflow", function (data) {
			relatedNodes = data["items"];
			// console.log(name + ' - related nodes: ');
			// relatedNodes.forEach(function(r) {
			// 	console.log(r.name);
			// });
			node.foundRelated = true;
			node.relatedNodes = relatedNodes;
			checkFoundAllRelated(allNodes, updateFeatureContent);
		});
	});
}

$('#searchByTagBtn').on('click', function () {
	var searchedTag = $('#searchText').val();
	$('ul').empty();
	callNodes(searchedTag);
	document.getElementById("demo").innerHTML = searchedTag;
});


$('.dropdown-item').on('click', function() {
	var user = $(this).text();
	callForUserName(topUsers[user.toLowerCase()]);
	callForUserNumber(topUsers[user.toLowerCase()]);
});


</script>
</br>
</br>
</div>
<script src="vendor/jquery.min.js"></script>
<script src="vendor/bootstrap.min.js"></script>
<script src="vendor/jquery-ui.min.js"></script>
</body>
